/**
 * KaraCos HTTP request processor and dispatcher
 * 
 * By Nicolas Karageuzian
 * 
 * This file is part of KaraCos.
 *
 * KaraCos is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * KaraCos is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KaraCos.  If not, see <http://www.gnu.org/licenses/>.
 */
var karacos = require('karacos'),
	url = require('url'),
	fs = require('fs'),
	staticResource = require('../../deps/static-resource'),
	fileHandler,
	dust = require('dust');
	log4js = require('log4js')();

logger = log4js.getLogger('karacos.http.processor');


fileHandler = staticResource.createHandler(fs.realpathSync('./resources/static'));

function process_obj_template(req,obj, callback) {
	var tmplFile, compiled, compiledId, source;
	compileId = obj._data.id;
	console.log(dust.cache);
	source = String(fs.readFileSync("./resources/templates/system.html"));
	compiled = dust.compile(source,compileId);
	dust.loadSource(compiled);
	console.log(dust.cache);
	dust.render(compileId, obj._data, function(err, out) {
		  callback(undefined,out);
		});
	
}

/**
 * Probes the karacos domain from the request
 * 
 * @param req Request to process
 */
function probe_domain(req, callback) {
	var reqstd_fqdn = req.headers.host,
	domain;
	logger.debug(reqstd_fqdn);
	karacos.model.Domain.get_by_fqdn(reqstd_fqdn,
		function(get_err,expected_domain) {
			if (typeof expected_domain === "undefined") {
				domain = karacos.http.sysdomain;
			} else {
				domain = expected_domain;
			}
			logger.debug("Fetched domain :" + domain._data.name);
			if (typeof callback !== "undefined")
				callback(domain);
	});
}

/**
 * Parse request and dispatch
 * @param req
 * @param res
 */
function processRequest(req,res) {
	logger.debug("Header: Host" + req.url);
	if (req.url.indexOf("/_static") === 0) {
		var url = req.url.substr(8);
		if(!fileHandler.handle(url, req, res)) {
	        res.writeHead(404);
	        res.write('404');
	        res.end();
	    }
	} else {
		probe_domain(req, function(domain) {
			process_obj_template(req,domain, function(err, out) {
				res.writeHead(200, {'Content-Type': 'text/plain'});
				//console.log(req);
				res.write(out);
				res.end();				
			});
		});
	}
}

exports.processRequest = processRequest;