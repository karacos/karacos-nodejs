var redis = require("redis"),
	redis2json = require("../../deps/redis2json"),
	karacos = require('karacos'),
	log4js = require('log4js')(), logger,
	sys = require('sys');
logger = log4js.getLogger('karacos:wrapper');
redis2json.redis = redis;

var client;
function getClient() {
	if (typeof client === "undefined") {
		logger.debug('getClient: Creating client connexion');
		var client = redis.createClient(6379, "127.0.0.1");
	}
	return client;
};

function endClient(){
	if (typeof client !== "undefined") {
		logger.debug('endClient: Terminating client connexion');
		client.end();
		client = "undefined";
	}
}

redis2json.client = getClient();

exports.get = function(id, callback) {
	var type,
		doc, map, variable, model;
	logger.debug("get:get id:" + id);	
	getClient().get(id, function(err, res) {
		var variable;
		if (res !== "null" && res !== null) {
			logger.debug("get: res:" + res);
			type = res;
			if (type in karacos.model) {
				logger.debug("Value is a valid type name, instanciating " + type);
				model = karacos.model[type];
				map = model.prototype.map;
				variable = {id: id};
				//logger.debug("get: model:");
				//console.log(model);
				//logger.debug("get: map:");
				//console.log(map);
				//logger.debug("get: variable:");
				//console.log(variable);
				// hangs occurs ..... when using nedis
				redis2json.load(map, variable, function (error, result) {
					var resultObj;
					logger.debug("get:Redis2json load, result:" + sys.inspect(result));
					logger.debug("get:Instanciating result:" + sys.inspect(model));
					resultObj = new model(result);
					logger.debug("get:Result instance:" + sys.inspect(resultObj));
					if (typeof callback !== "undefined")
						callback(undefined,resultObj );
				});
			} else {
				if (typeof callback !== "undefined")
					callback(undefined, res);
			}
		} else {
			if (typeof callback !== "undefined")
				callback(err);
		}
	});
};

exports.getClient = getClient;
exports.endClient = endClient;