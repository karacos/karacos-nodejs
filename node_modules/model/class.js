/* 
 * KaraCos Document, parent for any KaraCos objects with redis mapping 
 *
 * By Nicolas Karageuzian
 * 
 * This file is part of KaraCos.
 *
 * KaraCos is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * KaraCos is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KaraCos.  If not, see <http://www.gnu.org/licenses/>.
 *
 */// Implemented from Simple JavaScript Inheritance (http://ejohn.org/blog/simple-javascript-inheritance/)

var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/,
	karacos = require('karacos'),
	log4js = require('log4js')();

logger = log4js.getLogger('karacos:Class');
// The base Class implementation (does nothing)
Class = function(){};

// Create a new Class that inherits from this class
Class.extend = function(prop, classname) {
    var _super = this.prototype;
    // Instantiate a base class (but only create the instance,
	// don't run the init constructor)
	initializing = true;
	
	var prototype = new this();
	initializing = false;
	
	// Copy the properties over onto the new prototype
	for (var name in prop) {
	  if (name === 'map') {
		  if (typeof prototype.map === "undefined") {
			  prototype.map = {type: "Class:{id}:type"}
		  }
		  prototype.map = karacos.extend(prop.map, prototype.map);
	  } else {
		  // Check if we're overwriting an existing function
		  prototype[name] = typeof prop[name] == "function" && 
		  typeof _super[name] == "function" && fnTest.test(prop[name]) ?
				  (function(name, fn){
					  return function() {
						  var tmp = this._super;
						  
						  // Add a new ._super() method that is the same method
						  // but on the super-class
						  this._super = _super[name];
						  
						  // The method only need to be bound temporarily, so we
						  // remove it when we're done executing
						  var ret = fn.apply(this, arguments);        
						  this._super = tmp;
						  
						  return ret;
					  };
				  })(name, prop[name]) : prop[name];		  
	  }
	}
	
	// The dummy class constructor
	function Class() {
	  // All construction is actually done in the init method
	  if ( !initializing && this.init )
	    this.init.apply(this, arguments);
	}
	
	// Populate our constructed prototype object
	Class.prototype = prototype;
	
	// Enforce the constructor to be what we expect
	Class.constructor = Class;
	
	// And make this class extendable
	Class.extend = arguments.callee;
	// Register the class in KaraCos domain
    karacos.model[classname] = Class;
    return Class;
  }; // Class.extend
  
  // As extends is not called at Class declaration, register type
karacos.model.Class = Class;