var karacos = require('karacos'),
	assert = require('assert'),
	crypto = require('crypto'),
	Domain;
Domain = karacos.model.Document.extend({
		map: {
			id: ":{id}",
			name: "domain:{id}:name",
			fqdn: "domain:{id}:fqdn"
		},
		init: function(values) {
			this._super(values);
		},
		extend: function(prop) {
			if ('map' in prop) {
				prop.map = karacos.extend(prop.map, this.map);
			}
			this._super.extend(prop);
		}
	});

Domain.get_by_name = function(name, callback) {
	var client = karacos.wrapper.getClient();
	console.log("Looking for domain " + name);
	client.keys("Domain:*:name", function(err, replies){
		var id;
		if (replies.length <= 1) {
			callback({message:"More than one domain with that name"},undefined);
		}
		if (replies.length == 1) {
			id = replies[0].split(':')[1];
			console.log(id);
			client.mget(replies, function(err, reply) {
				console.log(reply);
				if (name == reply) {
					callback(undefined,karacos.wrapper.get(id));
				}
			});			
		} else {
			callback({message:"No domain found with that name"},undefined);
		}
	});
}
Domain.create = function(data, callback, type) {
	var client = karacos.wrapper.getClient(),
		hash = crypto.createHash('md5').update((new Date()).getTime().toString()),
		id,
		key;
	for (key in Domain.map) {
		if (key !== 'id') {
			assert.ok((key in data), "Attribute " + key + " is required");			
		}
	}
	this.get_by_name(data.name, function(error, domain) {
		if (domain === undefined) {
			id = hash.digest('hex');
			if (typeof type === "undefined") {
				type = 'Domain';
			}
			client.set("Domain:" + id, type);
			for (key in data) {
				client.set(type + ':' + id + ':' + key, data[key]);
			}
			karacos.wrapper.get(id,function(error,result){
				callback(undefined,result);
			});
		} else {
			callback({message:"Domain already exist with that name"});
		}
	});
}


karacos.model.Domain = Domain;