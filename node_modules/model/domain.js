var karacos = require('karacos'),
	assert = require('assert'),
	crypto = require('crypto'),
	Domain, logger,
	log4js = require('log4js')();

logger = log4js.getLogger('karacos:Domain');

Domain = karacos.model.Document.extend({
	logger: logger,
	init: function(values) {
		this._super(values);
	},
	map: {
		name: "Domain:{id}:name",
		fqdn: "Domain:{id}:fqdn"
	}
});

//Domain.map = {
//	fqdn: "Domain:{id}:fqdn"
//};

Domain.get_by_name = function(name, callback) {
	var client = karacos.wrapper.getClient();
	logger.debug("get_by_name:Looking for domain " + name);
	client.keys("Domain:*:name", function(err, domainkeys){
		var id;
		logger.debug("get_by_name:replies Domain:*:name : " + domainkeys.length + " found - " + domainkeys);
		if (domainkeys.length !== 0) {
			client.mget(domainkeys, function(err, domainnames){
				logger.debug("get_by_name: domainnames : " + domainnames)
				if (domainnames.sort().indexOf(name) === -1) {
					logger.info('get_by_name: No domain found with that name');
					if (typeof callback !== "undefined")
						callback({message:"No domain found with that name"},undefined);
					return;
				}
				if (domainnames.indexOf(name) !== domainnames.lastIndexOf(name)) {
					logger.error("get_by_name: More than one domain with that name");
					if (typeof callback !== "undefined")
						callback({message:"More than one domain with that name"},undefined);
				} else {
					id = domainkeys[0].split(':')[1];
					logger.debug("get_by_name:foundId:"+id);
						karacos.wrapper.get(id, function(err, domain){
							
							if (typeof callback !== "undefined")
								callback(err,domain);
						}
						);			
				} 
			});
		} else {
			if (typeof callback !== "undefined")
				callback({message:"No domains in system"},undefined);
			logger.info("get_by_name: No domains in system");
		}
	});
}
Domain.create = function(data, callback) {
	var client = karacos.wrapper.getClient(),
		hash = crypto.createHash('md5'),
		id,
		key;
	if (typeof data.type === "undefined") {
		data.type = 'Domain';
	}
	for (key in Domain.prototype.map) {
		if (key !== 'id') {
			assert.ok((key in data), "Attribute " + key + " is required");			
		}
	}
	this.get_by_name(data.name, function(error, domain) {
		var keyname;
		logger.debug("create: Attemp to find domain : " + domain);
		if (typeof domain === "undefined") {
			hash.update((new Date()).getTime().toString());
			id = hash.digest('hex');
			data.id = id;
			logger.debug("create:No domain found, creating id:" + id);
			
			client.set(id, data.type);
//			logger.debug("create:Setting key:" + id + " with value:" + type);
//			client.set("Class:" + id + ":type", type);
//			client.set("Domain:" + id, id);
			for (key in data) {
				keyname = karacos.fillVariables(Domain.prototype.map[key],data);
				logger.debug("create:Setting key:" + keyname + " with value:" + data[key]);
				client.set(keyname, data[key]);
			}
			karacos.wrapper.get(id,function(error, result){
				if (typeof callback !== "undefined")
					callback(error,result);
			});
		} else {
			if (typeof callback !== "undefined")
				callback({message:"Domain already exist with that name"},undefined);
		}
	});
}


karacos.model.Domain = Domain;