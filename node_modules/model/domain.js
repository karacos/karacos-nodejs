var karacos = require('karacos'),
	assert = require('assert'),
	Domain, logger,
	log4js = require('log4js')();

logger = log4js.getLogger('karacos.model.Domain');

Domain = karacos.model.Parent.extend({
	logger: logger,
	init: function(values) {
		this._super(values);
	},
	map: {
		name: "Domain:{id}:name",
		fqdn: "Domain:{id}:fqdn"
	}
}, 'Domain');

//Domain.map = {
//	fqdn: "Domain:{id}:fqdn"
//};

Domain.get_by_name = function(name, callback) {
	var client = karacos.wrapper.getClient();
	logger.debug("get_by_name:Looking for domain " + name);
	client.keys("Domain:*:name", function(err, domainkeys){
		var id;
		logger.debug("get_by_name:replies Domain:*:name : " + domainkeys.length + " found - " + domainkeys);
		if (domainkeys.length !== 0) {
			// at least one domain key in redis
			client.mget(domainkeys, function(err, domainnames){
				// f
				logger.debug("get_by_name: domainnames : " + domainnames)
				if (domainnames.sort().indexOf(name) === -1) {
					logger.info('get_by_name: No domain found with that name');
					if (typeof callback !== "undefined")
						callback({message:"No domain found with that name"},undefined);
					return;
				}
				assert.ok(domainnames.indexOf(name) === domainnames.lastIndexOf(name));
				id = domainkeys[0].split(':')[1];
				logger.debug("get_by_name:foundId:"+id);
				karacos.wrapper.get(id, function(err, domain){
					if (typeof callback !== "undefined")
						callback(err,domain);
				});
			});
		} else {
			if (typeof callback !== "undefined")
				callback({message:"No domains in system"},undefined);
			logger.info("get_by_name: No domains in system");
		}
	});
}
Domain.create = function(data, callback) {
	var client = karacos.wrapper.getClient(),
		id,
		key;
	if (typeof data.type === "undefined") {
		data.type = 'Domain';
	}
	this.get_by_name(data.name, function(error, domain) {
		var keyname;
		logger.debug("create: Expecting empty result: " + domain);
		if (typeof domain !== "undefined") {
			if (typeof callback !== "undefined")
				callback({message:"Domain already exist with that name"},domain);
		} else {
			// Creates the domain, generates object id
			karacos.model.Parent.create(data, function(error, domain) {
				if (typeof callback !== "undefined")
					callback(error,domain);
			});
		} 
	});
}