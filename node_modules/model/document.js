/**
 * A basic Document, identified by an id and a name
 * 
 * By Nicolas Karageuzian
 * 
 * This file is part of KaraCos.
 *
 * KaraCos is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * KaraCos is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with KaraCos.  If not, see <http://www.gnu.org/licenses/>.
 *
 */
var karacos = require('karacos'),
	assert = require('assert'),
	crypto = require('crypto'),
	log4js = require('log4js')();

logger = log4js.getLogger('karacos.model.Document');

Document = karacos.model.Class.extend({
	/**
	 * Required properties for a document.
	 * mapping for redis properties (using redis2json
	 */
	map: {
		id: "Document:{id}",
		name: "Document:{id}:name"
	},
	/**
	 * The document constructor
	 */
	init: function(values) {
		this.logger.debug("Document.__init__ Initializing Document");
		//console.log(values);
		this._data = values;
	},
	/**
	 * Getter/Setter in a jQuery style for document object
	 */
	attr: function(key, value) {
		var client, rkn;
		if (typeof value === "undefined") {
			if (key in this._data) {
				return this._data[key];
			} else {
				  return null;
			}
		} else {
			client = karacos.wrapper.getClient();
			this._data[key] = value;
			rkn = this._data.type + ":" + this._data.id + ':' + key;
			client.set(rkn,value);
			return this;
		}
	},
	/**
	 * Remove this document
	 */
	remove: function(callback) {
		var self = this,
			client = karacos.wrapper.getClient();
		client.keys('*:'+ self._data.id+'*', function(err,res){
			client.del(res, function(){
				client.del(self._data.id, function(){
					if (typeof callback === "function") {
						callback();
						self = undefined;
					}
				});
			});
//			res.forEach(function(k){
//				client.del(k);
//			});
 		});
	}
}, 'Document');

/**
 * Static create method
 */
Document.create = function(data, callback) {
	var hash = crypto.createHash('md5'), id, map,
		client = karacos.wrapper.getClient(),
		msetArray = [];
	hash.update((new Date()).getTime().toString());
	id = hash.digest('hex');
	data.id = id;
	logger.debug("create:No document found, creating with id:" + id + " and type:" + data.type);
	for (key in karacos.model[data.type].prototype.map) {
		if (key !== 'id' && !(key.indexOf('$') >= 0)) {
			assert.ok((key in data), "Attribute " + key + " is required");			
		}
	}
	map = karacos.model[data.type].prototype.map;
	assert.ok(data.type in karacos.model);
	//TODO: break that need... see in wrapper.get
	msetArray.push(id)
	msetArray.push(data.type)
	for (key in data) {
		if (key in map) {
			if (typeof map[key] === "string") {
				keyname = karacos.fillVariables(map[key],data);
			} else if ('key' in map[key]) {
				keyname = karacos.fillVariables(map[key]['key'], data);
			}
		} else {
			keyname = data.type + ":" + data.id + ":" + key;
		}
		if (typeof data[key] === "string") {
			logger.debug("create:Setting key:" + keyname + " with value:" + data[key]);
			msetArray.push(keyname);
			msetArray.push(data[key]);
		} else {
			if (typeof data[key].length === "undefined") {
				// this value is an object
				//TODO handles (or not...)
			} else if  (typeof data[key].length === "number") {
				//this value is an array
				//TODO handles (or not...)
			}
		}
	}
	client.mset(msetArray, function(error,result){
		karacos.wrapper.get(id,function(error, result){
			if (typeof callback !== "undefined")
				callback(error,result);
		});
	});

}
