var karacos = require('karacos');

/**
 * Parent for containing objects
 * Parent can contain documents
 */
Parent = karacos.model.Document.extend({
	init: function(values){
		this._super(values);
	},
	map:{
		$$childrens: { variable: "childrenId", cmd: "lrange", key: "Parent:{id}:childrens", args: [0, 20] },
	    childrens: [{
	        id: "Document:{childrenId}:id",
	        name: "Document:{childrenId}:name",
	    }]
	},
	/**
	 * Creates a child Document as the last element of parent
	 * 
	 * @param nodeData: Object containing properties of new Document 
	 * 
	 */
	appendChild: function(nodeData, callback) {
		var new_child,
			self = this;
		nodeData.parent = this.id;
		assert.ok((nodeData.type in karacos.model));
		karacos.model[nodeData.type].create(nodeData, function(err, res) {
			var client,
				new_child = res;
			if (typeof res !== "undefined") {
				client = karacos.wrapper.getClient();
				client.lpush("Parent:"+self.id + ":childrens", res.id, function(err, res) {
					if (typeof err !== "undefined") {
						callback(err);
					} else {
						// Success
						callback(err,new_child);
					}
				});
			} else {
				callback(err,res);
			}
		});
		if (typeof callback === "function") {
			callback(new_child);
		}
	},
	
	getNamedItem: function(name, callback) {
		var client =  karacos.wrapper.getClient(),
			self = this;
		client.llen("Parent:"+self.id + ":childrens", function(err, res) {
			if (typeof res === "number") {
				client.lrange("Parent:"+self.id + ":childrens",0,res,function(err,res) {
					var keys = [];
					res.forEach(function(val) {
						keys.append("Document:" + val + ":name");
					});
					client.mget(keys, function(err,res){
						var results = [], value;
						for (value in res) {
							if (res[value] === name) {
								results.push(value);
							}
						}
						if (results.length === 1) {
							callback(undefined,karacos.wrapper.get(result[0]));
						} else {
							if (results.length === 0) {
							callback("No results found",undefined);
							} else {
								throw "More than one result";
							}
						}
							
						});
					});
				}
			});
		},
	}, 'Parent');

Parent.create = function(data, callback){
	if (typeof data.childrens === "undefined") {
		data.childrens = [];
	}
	karacos.model.Document.create(data, function(err,res){
		if (typeof callback !== "undefined")
			callback(err,res);
	});
}