var karacos = require('karacos'),
	assert = require('assert'),
	log4js = require('log4js')(),
	sys = require('sys');

logger = log4js.getLogger('karacos.model.Parent');

/**
 * Parent for containing objects
 * Parent can contain documents
 */
Parent = karacos.model.Document.extend({
	init: function(values){
		logger.debug("Initializing new Parent with values : " + sys.inspect(values));
		if (typeof values.childrens === "undefined") {
			values.childrens = [];
		}
		this._super(values);
	},
	map:{
		$$childrens: { variable: "childrenId", cmd: "lrange", key: "Parent:{id}:childrens", args: [0, 20] },
	    childrens: [{
	        id: "Document:{childrenId}:id",
	        name: "Document:{childrenId}:name",
	    }]
	},
	/**
	 * Creates a child Document as the last element of parent
	 * 
	 * @param nodeData: Object containing properties of new Document 
	 * 
	 */
	appendChild: function(nodeData, callback) {
		var 
			self = this;
		assert.ok((nodeData.type in karacos.model));
		nodeData.parent = self.attr('id');
		if (self instanceof karacos.model.Domain) {
			nodeData.domain = self.attr('id');
		} else {
			nodeData.domain = self.attr('domain');
		}
		karacos.model[nodeData.type].create(nodeData, function(err, res) {
			var
				client,
				new_child = res;
			self.logger.debug("Child created :" + sys.inspect(new_child));
			if (typeof res !== "undefined") {
				client = karacos.wrapper.getClient();
				client.lpush("Parent:"+self.attr('id') + ":childrens", res.id, function(err, res) {
					// Success
					self._data.childrens.push({'id':new_child.attr('id'), 'name': new_child.attr('name')});
					self.logger.debug("Added child : " + sys.inspect(self._data));
					if (typeof callback === "function") {
						callback(err,new_child);
					}
				});
			} else {
				callback(err,res);
			}
		});
	},
	/**
	 * Gets more childs in mapped objects
	 */
	getMoreChilds: function(callback) {
		var
			self = this,
			startIndex = self._data.childrens.length,
			client =  karacos.wrapper.getClient(),
			endIndex;
		client.llen("Parent:"+self.attr('id') + ":childrens", function(err, res) {
			if (typeof res === "number" && res > startIndex) {
				endIndex = res > startIndex + 20 ? startIndex + 20 : res;
				client.lrange("Parent:"+self.attr('id') + ":childrens",startIndex,endIndex,function(err,idList) {
					var keys = [];
					idList.forEach(function(childId) {
						keys.append("Document:" + childId + ":name");
					});
					client.mget(keys,function(err,names){
						names.forEach(function(childName,childIndex) {
							self.attr('childrens').push({'id':idList[childIndex], 'name': childName});
						});
						callback("found " + names.length + " more childs",names.length);
					});
					});
			} else {
				callback("No more childrens",0);
			}
		});
	},
	/**
	 * Search a child by it's name
	 */
	getChildByName: function(name, callback) {
		var client =  karacos.wrapper.getClient(),
			self = this;
		// look into childrens structure
		function fetchChild() {
			var children = undefined;
			self.attr('childrens').map(function(child){
				if (child.name === name) {
					assert.ok((typeof children === "undefined"), "More than one children with the same name");
					children = child;
				}
			});
			if (typeof children !== "undefined" ) {
				// Found a child, ok
				karacos.wrapper.get(children.id,function(err,res) {
					callback(err,res);
				});
				
			} else {
				self.getMoreChilds(function(err,res){
					if (res !== 0) {
						fetchChild();
					} else {
						callback("No child found with that name",undefined);
					}
				});
			}	
		}
		fetchChild();
	},
	/**
	 * 
	 */
	remove: function(callback){
		var
			self = this;
		function recursiveRemoveChildLast() {
			var currentchildRef;
			if (self._data.childrens) {
				if (self._data.childrens.length > 0) {
					currentchildRef = self._data.childrens.pop();
					self.logger.debug("RecursiveRemoveLastChild: currentChildRef: "+sys.inspect(currentchildRef));
					karacos.wrapper.get(currentchildRef.id, function(err,res) {
						self.logger.debug("RecursiveRemoveLastChild: Last child found : " + sys.inspect(res));
						if (typeof res !== "undefined") {
							res.remove(function(){
								recursiveRemoveChildLast();
							});
						} else {
							if (typeof callback !== "undefined") {
								callback();
							}
						}
					});
				} else {
					// no more childrens left, delete myself
					//self._super.call(self,callback);
					karacos.model.Document.prototype.remove.call(self,callback);
				}
			}
		}
		recursiveRemoveChildLast();		
	}
	}, 'Parent');

Parent.create = function(data, callback){
	logger.debug("create: with data: " + sys.inspect(data));
	if (typeof data.childrens === "undefined") {
		data.childrens = [];
	}
	karacos.model.Document.create(data, function(err,res){
		if (typeof callback !== "undefined")
			callback(err,res);
	});
}